/* Implement the reader writer problem using semaphore and mutex operations to synchronize n readers active in reader section at a same time, and one writer active at a time.
Test Cases:
A) If n readers are active no writer is allowed to write.
B) If one writer is writing no other writer should be allowed to read or write on the shared variable. */

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_READERS 5

int shared_variable = 0;
int reader_count = 0;
sem_t mutex, wrt;

void *writer(void *arg) {
    int new_value = (int)arg;
    sem_wait(&wrt);
    printf("Writer is writing new value %d\n", new_value);
    shared_variable = new_value;
    sem_post(&wrt);
    printf("Writer has finished writing\n");
    return NULL;
}

void *reader(void *arg) {
    int id = (int)arg;
    sem_wait(&mutex);
    reader_count++;
    if (reader_count == 1) {
        sem_wait(&wrt);
    }
    sem_post(&mutex);
    printf("Reader %d is reading the shared variable value: %d\n", id, shared_variable);
    sem_wait(&mutex);
    reader_count--;
    if (reader_count == 0) {
        sem_post(&wrt);
    }
    sem_post(&mutex);
    printf("Reader %d has finished reading\n", id);
    return NULL;
}

int main() {
    pthread_t readers[NUM_READERS], writer_thread;
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);
    int writer_value = 10;
    int reader_ids[NUM_READERS];
    for (int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }
    pthread_create(&writer_thread, NULL, writer, &writer_value);
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readers[i], NULL);
    }
    pthread_join(writer_thread, NULL);
    sem_destroy(&mutex);
    sem_destroy(&wrt);
    return 0;
}
