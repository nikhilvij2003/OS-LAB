* Implement the producer consumer problem using pthreads and mutex operarions.
Test cases:
a) A Producer produces if buffer is empty and consumer only comsumes if some content is in the buffer.
b) A Producer produces(writes) an item in the buffer and consumer consumes(deletes) the last produces item in the buffer
c) A producer produces(writes) on the last consumed(deleted) index of the buffer. */

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <sched.h>

#define BUFFER_SIZE 10

int buffer[BUFFER_SIZE];
int buffer_index = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void *producer(void *arg) {
    int i;
    for (i = 0; i < BUFFER_SIZE; i++) {
        pthread_mutex_lock(&mutex);
        while (buffer_index == BUFFER_SIZE) {
            pthread_mutex_unlock(&mutex);
            sched_yield();
            pthread_mutex_lock(&mutex);
        }
        buffer[buffer_index++] = i;
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

void *consumer(void *arg) {
    int i, item;
    for (i = 0; i < BUFFER_SIZE; i++) {
        pthread_mutex_lock(&mutex);
        while (buffer_index == 0) {
            pthread_mutex_unlock(&mutex);
            sched_yield();
            pthread_mutex_lock(&mutex);
        }
        item = buffer[--buffer_index];
        pthread_mutex_unlock(&mutex);
        printf("Consumer consumed %d\n", item);
    }
    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    int item = BUFFER_SIZE;
    pthread_mutex_lock(&mutex);
    buffer[buffer_index++] = item;
    pthread_mutex_unlock(&mutex);
    printf("Producer produced %d\n", item);

    pthread_mutex_lock(&mutex);
    item = buffer[--buffer_index];
    pthread_mutex_unlock(&mutex);
    printf("Consumer consumed %d\n", item);

    item = BUFFER_SIZE + 1;
    pthread_mutex_lock(&mutex);
    buffer[buffer_index++] = item;
    pthread_mutex_unlock(&mutex);
    printf("Producer produced %d\n", item);

    pthread_mutex_lock(&mutex);
    item = buffer[buffer_index];
    pthread_mutex_unlock(&mutex);
    printf("Producer produced %d\n", item);

    return 0;
}
